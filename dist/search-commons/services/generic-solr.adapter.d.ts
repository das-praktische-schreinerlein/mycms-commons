import { IDict } from 'js-data-http';
import { Mapper, Record } from 'js-data';
import { Facets } from '../model/container/facets';
import { GenericSearchResult } from '../model/container/generic-searchresult';
import { GenericSearchForm } from '../model/forms/generic-searchform';
import { GenericSearchHttpAdapter } from './generic-search-http.adapter';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/map';
import { MapperUtils } from './mapper.utils';
import { GenericFacetAdapter, GenericSearchAdapter } from './generic-search.adapter';
import { GenericAdapterResponseMapper } from './generic-adapter-response.mapper';
import { SolrConfig, SolrQueryBuilder } from './solr-query.builder';
import { ActionTagForm } from '../../commons/utils/actiontag.utils';
export declare abstract class GenericSolrAdapter<R extends Record, F extends GenericSearchForm, S extends GenericSearchResult<R, F>> extends GenericSearchHttpAdapter<R, F, S> implements GenericSearchAdapter<R, F, S>, GenericFacetAdapter<R, F, S> {
    protected mapperUtils: MapperUtils;
    protected solrQueryBuilder: SolrQueryBuilder;
    protected mapper: GenericAdapterResponseMapper;
    constructor(config: any, mapper: GenericAdapterResponseMapper);
    count(mapper: Mapper, query: any, opts?: any): Promise<number>;
    create(mapper: Mapper, props: any, opts?: any): Promise<R>;
    createMany(mapper: Mapper, props: any, opts: any): Promise<R>;
    destroy(mapper: Mapper, id: string | number, opts?: any): Promise<any>;
    destroyAll(mapper: Mapper, query: any, opts: any): Promise<any>;
    export(mapper: Mapper, query: any, format: string, opts: any): Promise<string>;
    find(mapper: Mapper, id: string | number, opts: any): Promise<R>;
    findAll(mapper: Mapper, query: any, opts: any): Promise<R[]>;
    facets(mapper: Mapper, query: any, opts: any): Promise<Facets>;
    search(mapper: Mapper, query: any, opts: any): Promise<S>;
    sum(mapper: Mapper, field: string, query: any, opts?: any): Promise<any>;
    update(mapper: Mapper, id: string | number, props: any, opts: any): Promise<R>;
    updateAll(mapper: Mapper, props: any, query: any, opts?: any): Promise<any>;
    updateMany(mapper: Mapper, records: R[], opts?: any): Promise<any>;
    afterSearch(mapper: Mapper, props: IDict, opts: any, result: any): Promise<S>;
    afterCount(mapper: Mapper, props: IDict, opts: any, result: any): Promise<number>;
    afterCreate(mapper: Mapper, props: IDict, opts: any, result: any): Promise<R>;
    afterUpdate(mapper: Mapper, id: number | string, opts: any, result: any): Promise<R>;
    afterFind(mapper: Mapper, id: number | string, opts: any, result: any): Promise<R>;
    afterDestroy(mapper: Mapper, id: number | string, opts: any, result: any): Promise<R>;
    _create(mapper: Mapper, props: any, opts: any): Promise<any>;
    _doActionTag(mapper: Mapper, Record: R, actionTagForm: ActionTagForm, opts: any): Promise<any>;
    _destroy(mapper: Mapper, id: string | number, opts: any): Promise<any>;
    _update(mapper: Mapper, id: string | number, props: any, opts: any): Promise<any>;
    deserialize(mapper: Mapper, response: any, opts: any): any;
    getPath(method: string, mapper: Mapper, id: string | number, opts: any): string;
    deserializeResponse(mapper: Mapper, response: any, opts: any): any;
    extractCountFromRequestResult(mapper: Mapper, result: any): number;
    extractRecordsFromRequestResult(mapper: Mapper, result: any): R[];
    extractFacetsFromRequestResult(mapper: Mapper, result: any): Facets;
    mapResponseDocument(mapper: Mapper, doc: any): Record;
    getAdapterPath(method: string, mapper: Mapper, id: string | number, opts: any): string;
    buildUrl(url: any, params: any): any;
    abstract mapToAdapterDocument(props: any): any;
    abstract getSolrConfig(): SolrConfig;
    protected queryTransformToAdapterSelectQuery(mapper: Mapper, params: any, opts: any): any;
    protected queryTransformToAdapterSelectQueryWithMethod(method: string, mapper: Mapper, params: any, opts: any): any;
}
